name: Python Application

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:  # Allow manual triggering

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: jarvis
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; else pip install -e .; fi
        pip install pytest pytest-cov
        
    - name: Generate requirements.txt
      run: |
        pip install pipreqs
        pipreqs --force
      
    - name: Create .env file
      run: |
        echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/jarvis" > .env
        echo "SESSION_SECRET=${{ secrets.SESSION_SECRET || 'development-secret-key' }}" >> .env
        
    - name: Initialize database
      run: |
        python -c "from app import app, db; from models import User, Memory, Conversation, Reminder; app.app_context().push(); db.create_all()"
        
    - name: Run tests
      run: |
        pytest --cov=. --cov-report=xml
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/jarvis
      continue-on-error: true
        
    - name: Upload coverage report
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
      continue-on-error: true
      
  deploy:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Deploy to production
      run: |
        echo "Deploying to production environment"
        # Add deployment steps here - could be to Heroku, AWS, or any other platform
        # For example, deploying to Heroku would look like:
        # if [ -n "${{ secrets.HEROKU_API_KEY }}" ]; then
        #   curl https://cli-assets.heroku.com/install.sh | sh
        #   heroku container:login
        #   heroku container:push web -a ${{ secrets.HEROKU_APP_NAME }}
        #   heroku container:release web -a ${{ secrets.HEROKU_APP_NAME }}
        # fi